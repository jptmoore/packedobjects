\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename tutorial.info
@settitle libpackedobjects tutorial
@c %**end of header

@copying
libpackedobjects - an XML schema-aware compression library
     
Copyright @copyright{} 2011 John P. T. Moore
@end copying

@titlepage
@title libpackedobjects tutorial
     
@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
     
@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top
@top libpackedobjects tutorial
     
libpackedobjects - an XML schema-aware compression library
@end ifnottex
     
@menu
* Introduction::                Introduction
* Installation::                Installation
* Getting started::             Getting started
* Data types::                  Data types
* Index::                       Index
@end menu

@node Introduction
@chapter Introduction

@section What is libpackedobjects?
@cindex What is libpackedobjects

libpackedobjects is a C library which can be used to efficiently compress an XML DOM by using the information provided by a corresponding XML Schema. The level of compression achieved is very similar to EXI but unlike EXI, libpackedobjects is designed to be light-weight and simple to implement. Therefore libpackedobjects is suited to embedded systems and mobile devices. The tool is designed for writing network protocols which strive to minimise the amount of data communicated. In addition to compression all data is validated by the schema during the encode and decode process.
@* @*
libpackedobjects is based on libxml2 and therefore should run on any system that libxml2 runs on. 

@section Key features
@cindex Key features

@itemize
@item
Very efficient encoding size
@item
Light-weight and fast
@item
Validates XML data on encode and decode
@item
Good choice of data types including the ability to apply range and size constraints
@item
Fully dynamic including the ability to change the protocol at runtime
@item
Simple API with two main function calls
@item
Highly portable - designed for embedded and mobile devices
@item
Simple subset of XML Schema required to create protocols
@end itemize


@section Limitations
@cindex Limitations

libpackedobjects is not a general purpose document compression tool. It is intended to be used in an application that generate XML that you wish to communicate over a network. As such it provides a simple DOM-based API for encoding and decoding structured data. The compression technique used is based on applying knowledge of the data types specified in a schema to provide better performance over statistical compression techniques. Therefore, you must write a valid schema for your data. The style of schema required is based on a small subset of XML Schema. This schema serves the purpose of formalising the network protocol and provides validation. Thus we think it is a good thing!

@node Installation
@chapter Installation

@section Installing libpackedobjects
@cindex Installing libpackedobjects

To install from the latest source:
@smallexample
git clone git://gitorious.org/libpackedobjects/libpackedobjects.git
cd libpackedobjects
autoreconf -i
./configure
make
make check
sudo make install
@end smallexample


@section Further reading
@cindex Further reading

@node Getting started
@chapter Getting started

@section Quick start
@cindex Quick start

After compiling and running 'make check' you should find a binary called 'packedobjects' in your src directory. This is command-line tool built with libpackedobjects which you can use to test out encoding and decoding:
@*
@smallexample
$ ./packedobjects --help
usage: packedobjects --schema <file> --in <file> --out <file>
@end smallexample
@noindent
To encode run:
@*
@smallexample
$ ./packedobjects --schema foo.xsd --in foo.xml --out foo.po
@end smallexample
@noindent
To decode run:
@*
@smallexample
$ ./packedobjects --schema foo.xsd --in foo.po --out foo.new.xml
@end smallexample
@noindent
If you want to examine the performance of the tool you can use the @code{--loop} command-line flag. This will loop everything including opening and closing files but will only run the initialisation function one time to mirror intended use.

@section API basics
@cindex API basics

There are only 4 main function calls which are made available by adding @code{#include <packedobjects/packedobjects.h>} to your code.
@smallexample
packedobjectsContext *init_packedobjects(const char *schema_file);

char *packedobjects_encode(packedobjectsContext *pc, xmlDocPtr doc);

xmlDocPtr packedobjects_decode(packedobjectsContext *pc, char *pdu);

void free_packedobjects(packedobjectsContext *poCtxPtr);
@end smallexample
@noindent
You first must initialise the library using your XML Schema. Typical use would be one called to init_packedobjects at startup and then multiple calls to encode/decode based on your protocol. The interface to the packedobjects_encode function requires a libxml2 doc type. The packedobjects_decode function returns a libxml2 doc type.
    
If during runtime your schema changed you must call the init function again with the new file. The library is designed to do preprocessing of the schema during the init function which then allows efficient encoding and decoding plus validation to take place. Therefore, do not call init_packedobjects more than once if you do not plan on supporting dynamically changing protocols at runtime.

To build an application with the software you must link with the library. Using autoconf you can add @code{PKG_CHECK_MODULES([LIBPACKEDOBJECTS], [libpackedobjects])} to your configure.ac file and then use the variables @code{$(LIBPACKEDOBJECTS_CFLAGS)} and @code{$(PACKEDOBJECTS_LIBS)} in your Makefile.am file.

@section Writing a schema
@cindex Writing a schema

libpackedobjects uses a subset of XML Schema. This provides a focus similar to the concept of a Domain Specific Language. You are provided with suitable data types to be able to create functional network protocols. We will use the canonical ``Hello World'' example. We first write a schema:
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://zedstar.org/xml/schema/packedobjectsDataTypes.xsd"/>
  <xs:element name="foo" type="string"/>
</xs:schema>
@end smallexample
@noindent
We then create the corresponding data:
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<foo>Hello World!</foo>
@end smallexample
@noindent
This simple example only defines one data type which happens to be a string. However it provides a template for the basic structure of all schemas. You first must include the libpackedobjects data types and then specify a root element. In this case the root element is called 'foo'.
@* @*
The easiest way to learn how to write a schema is by looking at some of the examples available @uref{https://gitorious.org/libpackedobjects/libpackedobjects/trees/master/examples, here.}

@section Schema styles: flat vs nested
@cindex Schema styles: flat vs nested

You have the choice of writing your schema in a flat style:

@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://zedstar.org/xml/schema/packedobjectsDataTypes.xsd"/>
  <xs:complexType name="foobar">
    <xs:sequence>
      <xs:element name="bar" type="integer"/>
      <xs:element name="baz" type="integer"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="foo" type="foobar"/>
</xs:schema>
@end smallexample
@noindent
You will see the use of a 'type' attribute to refer to the previously defined sequence. Or you can write your schema in a nested style:
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://zedstar.org/xml/schema/packedobjectsDataTypes.xsd"/>
  <xs:element name="foo">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="bar" type="integer"/>
        <xs:element name="baz" type="integer"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
@end smallexample
@noindent
Either schema could be used with the following XML:
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<foo>
  <bar>1</bar>
  <baz>2</baz>
</foo>
@end smallexample

@subsection Tips for writing an efficient schema
@cindex Tips for writing an efficient schema

If your schema is dominated by strings you may find that you are overusing this type. Are you sure the data could not be represented by another type? For example, the data you are modelling may be a string but only varies between a few different values. In such cases it is much more efficient to use an enumerated data type. For example we could represent the following data as a single string or we could use an enumeration as follows:
@smallexample
  <xs:element name="Name">
    <xs:simpleType>
      <xs:restriction base="enumerated">
        <xs:enumeration value="Binary 1" />
        <xs:enumeration value="Binary 2" />
        <xs:enumeration value="Binary 3" />
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
@end smallexample
@noindent
When we encode @code{<Name>Binary 2</Name>} we only need a couple of bits instead of a number of bytes.

@node Data types
@chapter Data types

Writing a packedobjects schema involves using a set of predefined data types. These data types provide convenient syntax for representing information such as an IP address or currency etc. Please note, the list of valid simple types is likely to change.

@section Simple types
@cindex Simple types

An up-to-date list of simple data types can be found  @uref{http://zedstar.org/xml/schema/packedobjectsDataTypes.xsd, here.} All string types and integers can have additional constraints added to them. This not only controls the size of the encoded data but can act as an extra form of validation.

@subsection String constraints
@cindex String constraints

All string types can be constrained with size constraints: @code{xs:minLength}, @code{xs:maxLength} and @code{xs:length}. For example you might have:
@smallexample
  <xs:element name="givenName">
    <xs:simpleType>
      <xs:restriction base="string">
        <xs:minLength value="1" />
        <xs:maxLength value="64" />
      </xs:restriction>
    </xs:simpleType>
  </xs:element>      
@end smallexample
@noindent
This will restrict givenName to be between 1 and 64 characters in length (inclusive). Or you might use something like:
@smallexample
  <xs:element name="initial">
    <xs:simpleType>
      <xs:restriction base="string">
        <xs:length value="1" />
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
@end smallexample
@noindent
This only allows a single character to be present.

@subsection Integer constraints
@cindex Integer constraints

Integers can be constrained with range constrants: @code{xs:minInclusive} and @code{xs:maxInclusive}. So you could use both constraints:
@smallexample
  <xs:element name="foo">
    <xs:simpleType>
      <xs:restriction base="integer">
        <xs:minInclusive value="0" />
        <xs:maxInclusive value="100" />
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
@end smallexample
@noindent
Or you could just one of the constraints:
@smallexample
  <xs:element name="foo">
    <xs:simpleType>
      <xs:restriction base="integer">
        <xs:maxInclusive value="100" />
      </xs:restriction>
    </xs:simpleType>
  </xs:element>
@end smallexample
@noindent
In this case negative integers would be valid.

@section Complex types
@cindex Complex types

There are only two complex data types and these allow you to represent sequences and choices.

@subsection Sequence
@cindex Sequence

A sequence is a way of logically grouping data within its own unique namespace. Every item in the sequence must be present and be in the correct order. So given the following:
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://zedstar.org/xml/schema/packedobjectsDataTypes.xsd"/>
  <xs:complexType name="foobar">
    <xs:sequence>
      <xs:element name="boz" type="integer"/>
      <xs:element name="baz" type="integer"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="foo">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="bar" type="foobar"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>    
</xs:schema>
@end smallexample
@noindent
We could supply the following data:
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<foo>
  <bar>
    <boz>1</boz>
    <baz>2</baz>
  </bar>
</foo>
@end smallexample


@subsection Sequence with optionality
@cindex Sequence with optionality

Sometimes we don't want to include everything in the sequence. In this case you can use a variant of the sequence type to express this optionality. You just need to add the attribute @code{minOccurs="0"} to the items which are optional. Using the previous example:
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://zedstar.org/xml/schema/packedobjectsDataTypes.xsd"/>
  <xs:complexType name="foobar">
    <xs:sequence>
      <xs:element name="boz" type="integer"/>
      <xs:element name="baz" type="integer" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="foo">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="bar" type="foobar"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>    
</xs:schema>
@end smallexample
@noindent
So in this case we saying you must include a boz item but baz items are optional. Therefore the following is now valid:
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<foo>
  <bar>
    <boz>1</boz>
  </bar>
</foo>
@end smallexample

@subsection Sequences with data that may repeat
@cindex Sequence with data that may repeat

You will often work with data that has a repeating structure. You can handle this with a special form of sequence by adding the @code{maxOccurs="unbounded"} to item may repeat. Using the previous example we could do the following:
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://zedstar.org/xml/schema/packedobjectsDataTypes.xsd"/>
  <xs:complexType name="foobar">
    <xs:sequence>
      <xs:element name="boz" type="integer"/>
      <xs:element name="baz" type="integer" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="foo">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="bar" type="foobar" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>    
</xs:schema>
@end smallexample
@noindent
Now the following is valid:
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<foo>
  <bar>
    <boz>1</boz>
    <baz>2</baz>
  </bar>
  <bar>
    <boz>1</boz>
  </bar>
</foo>
@end smallexample

@subsection Choice
@cindex Choice

The ability to structure data selectively is very powerful. You can easily implement simple network protocols where there is a choice between the different application messages. You could, for example, have a state machine which maps to different nested levels of choices. As a simple example we could implement a ping type protocol using:
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://zedstar.org/xml/schema/packedobjectsDataTypes.xsd"/>
  <xs:element name="pingpong">
    <xs:complexType>
      <xs:choice>
        <xs:element name="ping" type="null" />
        <xs:element name="pong" type="null" />
      </xs:choice>
    </xs:complexType>
  </xs:element> 
</xs:schema>
@end smallexample
@noindent
Our client application might supply:
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<pingpong>
  <ping/>
</pingpong
@end smallexample
@noindent
And our server application might respond with:
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<pingpong>
  <pong/>
</pingpong
@end smallexample
@noindent
But both applications use the same network protocol or schema as they must have knowledge of both messages.

@node Index
@unnumbered Index
     
@printindex cp
     
@bye



