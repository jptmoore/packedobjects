\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename tutorial.info
@settitle libpackedobjects tutorial
@c %**end of header

@copying
libpackedobjects - an XML schema-aware compression library
     
Copyright @copyright{} 2011 John P. T. Moore
@end copying

@titlepage
@title libpackedobjects tutorial
     
@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
     
@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top
@top libpackedobjects tutorial
     
libpackedobjects - an XML schema-aware compression library
@end ifnottex
     
@menu
* Introduction::                Introduction
* Installation::                Installation
* Getting started::             Getting started
* Data types::                  Data types
* Index::                       Index
@end menu

@node Introduction
@chapter Introduction

@section What is libpackedobjects?
@cindex What is libpackedobjects

libpackedobjects is a C library which can be used to efficiently compress an XML DOM by using the information provided by a corresponding XML Schema. The level of compression achieved is very similar to EXI but unlike EXI, libpackedobjects is designed to be light-weight and simple to implement. Therefore libpackedobjects is suited to embedded systems and mobile devices. The tool is designed for writing network protocols which strive to minimise the amount of data communicated. In addition to compression all data is validated by the schema during the encode and decode process.
@* @*
libpackedobjects is based on libxml2 and therefore should run on any system that libxml2 runs on. 

@section Key features
@cindex Key features

@itemize
@item
Very efficient encoding size
@item
Light-weight and fast
@item
Validates XML data on encode and decode
@item
Good choice of data types including the ability to apply range and size constraints
@item
Fully dynamic including the ability to change the protocol at runtime
@item
Simple API with two main function calls
@item
Highly portable - designed for embedded and mobile devices
@item
Simple subset of XML Schema required to create protocols
@end itemize


@section Limitations
@cindex Limitations

libpackedobjects is not a general purpose document compression tool. It is intended to be used in an application that generates XML that you wish to communicate over a network. As such it provides a simple DOM-based API for encoding and decoding structured data. The compression technique used is based on applying knowledge of the data types specified in a schema to provide better performance over statistical compression techniques. Therefore, you must write a valid schema for your data. The style of schema required is based on a small subset of XML Schema. This schema serves the purpose of formalising the network protocol and provides validation. Thus we think having a schema is a good thing!

@node Installation
@chapter Installation

@section Installing libpackedobjects
@cindex Installing libpackedobjects

To install from the latest source:
@smallexample
git clone git://gitorious.org/libpackedobjects/libpackedobjects.git
cd libpackedobjects
autoreconf -i
./configure
make
make check
sudo make install
@end smallexample


@section Further reading
@cindex Further reading

@node Getting started
@chapter Getting started

@section Quick start
@cindex Quick start

After compiling and running 'make check' you should find a binary called 'packedobjects' in your src directory. This is command-line tool built with libpackedobjects which you can use to test out encoding and decoding:
@*
@smallexample
$ ./packedobjects --help
usage: packedobjects --schema <file> --in <file> --out <file>
@end smallexample
@noindent
To encode run:
@*
@smallexample
$ ./packedobjects --schema foo.xsd --in foo.xml --out foo.po
@end smallexample
@noindent
To decode run:
@*
@smallexample
$ ./packedobjects --schema foo.xsd --in foo.po --out foo.new.xml
@end smallexample
@noindent

@section Writing a schema
@cindex Writing a schema

libpackedobjects uses a subset of XML Schema. This provides a focus similar to the concept of a Domain Specific Language. You are provided with suitable data types to be able to create functional network protocols. We will use the canonical ``Hello World'' example. We first write a schema:
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:include schemaLocation="http://zedstar.org/xml/schema/packedobjectsDataTypes.xsd"/>
  <xs:element name="foo" type="string"/>
</xs:schema>
@end smallexample
@noindent
We then create the corresponding data:
@smallexample
<?xml version="1.0" encoding="UTF-8"?>
<foo>Hello World!</foo>
@end smallexample
@noindent
This simple example only defines one data type which happens to be a string. However it provides a template for the basic structure of all schemas. You first must include the libpackedobjects data types and then specify a root element. In this case the root element is called 'name'.

@subsection API basics
@cindex API basics

There are only 4 main function calls:
@smallexample
packedobjectsContext *init_packedobjects(const char *schema_file);

char *packedobjects_encode(packedobjectsContext *pc, xmlDocPtr doc);

xmlDocPtr packedobjects_decode(packedobjectsContext *pc, char *pdu);

void free_packedobjects(packedobjectsContext *poCtxPtr);
@end smallexample
@noindent
You first must initalise the library using your XML Schema. Typical use would be one called to init_packedobjects at startup and then multiple calls to encode/decode based on your protocol. If during runtime your schema changed you must called the init function again with the new file. The library is designed to do preposing of the schema during the init function which then allows efficient encoding and decoding plus validation to take place. Therefore, it makes no sense to call init_packedobjects more than once if you do not plan on supporting dynamically changing protocols at runtime. If you do you will suffer a needless performance cost.

@node Data types
@chapter Data types

@section Simple types
@cindex Simple types

@section Complex types
@cindex Complex types
     
@node Index
@unnumbered Index
     
@printindex cp
     
@bye



